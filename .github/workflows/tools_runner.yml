name: Run On Comment

on:
  issue_comment:
    types:
    - created

jobs:
  pmf2mp4:
    if: ${{ contains( github.event.issue.title, '[PMF2MP4]' ) }}
    runs-on: windows-latest

    steps:
      - name: check if comment contains attachment
        uses: actions-ecosystem/action-regex-match@v2
        id: video-url
        with:
          text: |
            '${{ github.event.comment.body }}'
          regex: '\[.*\]\((.*\.zip)\)'

      - name: get attached file name
        if: ${{ steps.video-url.outputs.match != '' }}
        uses: actions-ecosystem/action-regex-match@v2
        id: video-name
        with:
          text: |
            '${{ github.event.comment.body }}'
          regex: '\[(.*)\]\(.*\.zip\)'
      
      - name: download latest release of TeamPBCN/pmftools
        uses: dsaltares/fetch-gh-release-asset@master
        id: download-release
        with:
          repo: TeamPBCN/pmftools
          version: 'tags/1.0'
          file: 'pmftools.zip'
          target: 'pmftools.zip'
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: unzip pmftools
        run: |
          unzip pmftools.zip
          mkdir -p tools/bin
          mv pmftools/tools/psmfdump.exe tools/bin/
          mv pmftools/tools/ffmpeg.exe tools/bin/

      - name: download attachment from comment
        if: ${{ steps.video-url.outputs.match != '' }}
        run: |
          curl -L -o /tmp/${{ steps.video-name.outputs.group1 }}.zip ${{ steps.video-url.outputs.group1 }}
          unzip /tmp/${{ steps.video-name.outputs.group1 }}.zip
      
      - name: dump video and audio
        if: ${{ steps.video-url.outputs.match != '' }}
        run: |
          ./tools/bin/psmfdump.exe /tmp/${{ steps.video-name.outputs.group1 }} -a /tmp/${{ steps.video-name.outputs.group1 }}.oma -v /tmp/${{ steps.video-name.outputs.group1 }}.264

      - name: compose video
        if: ${{ steps.video-url.outputs.match != '' }}
        run: |
          ./tools/bin/ffmpeg -i /tmp/${{ steps.video-name.outputs.group1 }}.264 -i /tmp/${{ steps.video-name.outputs.group1 }}.oma -c copy -s 480x270 /tmp/${{ steps.video-name.outputs.group1 }}.mp4
      
      - name: upload video
        if: ${{ steps.video-url.outputs.match != '' }}
        uses: actions/upload-artifact@v1
        with:
          path: /tmp/${{ steps.video-name.outputs.group1 }}.mp4
          name: ${{ steps.video-name.outputs.group1 }}.mp4
          mime-type: video/mp4
          target-path: ${{ steps.video-name.outputs.group1 }}.mp4
          
